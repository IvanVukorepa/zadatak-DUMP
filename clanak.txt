Git (/ɡɪt/[8]) is a version control system (VCS) for tracking changes in computer files and coordinating work on those files among multiple people. It is primarily used for software development,[9] but it can be used to keep track of changes in any files. As a distributed revision control system it is aimed at speed,[10] data integrity,[11] and support for distributed, non-linear workflows.[12]

Git was created by Linus Torvalds in 2005 for development of the Linux kernel, with other kernel developers contributing to its initial development.[13] Its current maintainer since 2005 is Junio Hamano.

As with most other distributed version control systems, and unlike most client–server systems, every Git directory on every computer is a full-fledged repository with complete history and full version tracking abilities, independent of network access or a central server.[14]

Like the Linux kernel, Git is free software distributed under the terms of the GNU General Public License version 2.

Contents
Git development began in April 2005, after many developers of the Linux kernel gave up access to BitKeeper, a proprietary source control management (SCM) system that they had formerly used to maintain the project.[15] The copyright holder of BitKeeper, Larry McVoy, had withdrawn free use of the product after claiming that Andrew Tridgell had reverse-engineered the BitKeeper protocols.[16] (The same incident would also spur the creation of another version control system, Mercurial.)

Linus Torvalds wanted a distributed system that he could use like BitKeeper, but none of the available free systems met his needs, especially for performance. Torvalds cited an example of a source-control management system needing 30 seconds to apply a patch and update all associated metadata, and noted that this would not scale to the needs of Linux kernel development, where syncing with fellow maintainers could require 250 such actions at once. For his design criteria, he specified that patching should take no more than three seconds,[10] and added three more points:

    Take Concurrent Versions System (CVS) as an example of what not to do; if in doubt, make the exact opposite decision[12]
    Support a distributed, BitKeeper-like workflow[12]
    Include very strong safeguards against corruption, either accidental or malicious[11]

These criteria eliminated every then-extant version control system except Monotone. Performance considerations excluded it, too.[12] So immediately after the 2.6.12-rc2 Linux kernel development release, Torvalds set out to write his own system.[12]

The development of Git began on 3 April 2005.[21] Torvalds announced the project on 6 April;[22] it became self-hosting as of 7 April.[21] The first merge of multiple branches took place on 18 April.[23] Torvalds achieved his performance goals; on 29 April, the nascent Git was benchmarked recording patches to the Linux kernel tree at the rate of 6.7 per second.[24] On 16 June Git managed the kernel 2.6.12 release.[25]

Torvalds turned over maintenance on 26 July 2005 to Junio Hamano, a major contributor to the project.[26] Hamano was responsible for the 1.0 release on 21 December 2005, and remains the project's maintainer.[27]
Git does not provide access control mechanisms, but was designed for operation with other tools that specialize in access control.[70]

On 17 December 2014, an exploit was found affecting the Windows and Mac versions of the Git client. An attacker could perform arbitrary code execution on a target computer with Git installed by creating a malicious Git tree (directory) named .git (a directory in Git repositories that stores all the data of the repository) in a different case (such as .GIT or .Git, needed because Git doesn't allow the all-lowercase version of .git to be created manually) with malicious files in the .git/hooks subdirectory (a folder with executable files that Git runs) on a repository that the attacker made or on a repository that the attacker can modify. If a Windows or Mac user pulls (downloads) a version of the repository with the malicious directory, then switches to that directory, the .git directory will be overwritten (due to the case-insensitive trait of the Windows and Mac filesystems) and the malicious executable files in .git/hooks may be run, which results in the attacker's commands being executed. An attacker could also modify the .git/config configuration file, which allows the attacker to create malicious Git aliases (aliases for Git commands or external commands) or modify extant aliases to execute malicious commands when run. The vulnerability was patched in version 2.2.1 of Git, released on 17 December 2014, and announced on the next day.[71][72]

Git version 2.6.1, released on 29 September 2015, contained a patch for a security vulnerability (CVE-2015-7545)[73] which allowed arbitrary code execution.[74] The vulnerability was exploitable if an attacker could convince a victim to clone a specific URL, as the arbitrary commands were embedded in the URL itself.[75] An attacker could use the exploit via a man-in-the-middle attack if the connection was unencrypted,[75] as they could redirect the user to a URL of their choice. Recursive clones were also vulnerable, since they allowed the controller of a repository to specify arbitrary URLs via the gitmodules file.[75]

Git uses SHA-1 hashes internally. Linus Torvalds has responded that the hash was mostly to guard against accidental corruption, and the security a cryptographically secure hash gives was just an accidental side effect, with the main security being signing elsewhere.[76][77]
